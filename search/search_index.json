{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"How we do at Wakeflow","text":"<p>This repo provides some documentation of our processes at Wakeflow. We share it publically so that our client and potential hires can learn about how we go about our business.</p> <p>If you have any questions/comments/inspiration please don't hesitate to reach out to contact@wakeflow.io or contribute directly by making a Pull Request (see <code>How we contribute</code> below).</p>"},{"location":"#professional-development","title":"Professional Development","text":"<ul> <li>How we interview candidates</li> <li>How we onboard</li> <li>How we train</li> <li>How we holiday</li> <li>How we promote</li> </ul>"},{"location":"#coding","title":"Coding","text":"<ul> <li>How we define good software</li> <li>How we contribute</li> <li>How we Javascript</li> <li>How we deploy</li> <li>How we handle secrets</li> <li>How we configure our dotfiles</li> <li>How we test</li> <li>How we make API requests</li> <li>How we sort arrays</li> <li>How we do dates</li> <li>How we CSS</li> <li>How we lint</li> <li>How we CI/CD</li> <li>How we backup Firestore</li> <li>How we track events</li> <li>How we validate</li> </ul>"},{"location":"#our-microservices","title":"Our Microservices","text":"<p>There are a number of microservies that we have developed in-house that we universally use on our projects:</p> <ul> <li>tokens.wakeflow.io for authenticating</li> <li>events.wakeflow.io for event tracking </li> <li>timer.wakeflow.io for delaying API calls</li> <li>emails.wakeflow.io for sending emails</li> <li>2fa.wakeflow.io for multi-factor authentication</li> <li>payments.wakeflow.io for taking payments</li> <li>team.wakeflow.io for internal affairs</li> <li>db.wakeflow.io for quick DB requirements</li> <li>files.wakeflow.io for non-public file storage</li> <li>crm.wakeflow.io for keeping track of our customers</li> </ul> <p></p>"},{"location":"api_requests/","title":"Using <code>Axios</code> for API Requests","text":"<p>At wakeflow, we follow a consistent approach when it comes to making API requests in both front-end and back-end development. We utilize the <code>Axios</code> library as our preferred choice for handling HTTP requests. In this guide, we'll explore why <code>Axios</code> is a better alternative to native browser fetch and how it ensures consistency across our projects.</p>"},{"location":"api_requests/#install","title":"Install","text":"<p>To get started with <code>axios</code>, you can install it using npm or yarn:</p> <pre><code>npm i axios\n</code></pre> <p>or</p> <pre><code>yarn add axios\n</code></pre>"},{"location":"api_requests/#example-axios-function","title":"Example <code>Axios</code> function","text":"<p>The code snippet showcases an <code>Axios</code> API request function where the <code>axios</code> library is used to handle the HTTP request. In the event of an error, relevant details such as the response data, error message, status code, and the function name (createMessagebirdContact) are logged to facilitate effective error handling.</p> <pre><code>export const createMessagebirdContact = async data =&gt; {\n  try {\n    const res = await axios({\n      method: `POST`,\n      url: `https://contacts.messagebird.com/v2/contacts`,\n      headers: {\n        'Content-Type': `application/json`,\n        Authorization: `AccessKey ${process.env.ACCESS_KEY}`,\n      },\n      data,\n\n    })\n    return res.data\n  } catch (err) {\n      console.log(err.response?.data)\n      console.log(err.message)\n      console.log(err.response?.status)\n      console.log(`createMessagebirdContactError`)\n    throw err\n  }\n}\n</code></pre>"},{"location":"api_requests/#why-axios","title":"Why <code>Axios</code>?","text":"<p><code>Axios</code> offers several advantages over fetch, making it an ideal choice for our API request needs:</p> <ol> <li> <p>Promises and async/await support: <code>Axios</code> provides a clean and intuitive syntax for handling asynchronous operations, allowing us to write asynchronous code in a more readable and manageable way. It supports promises and async/await, making error handling and response handling simpler.</p> </li> <li> <p>Cross-browser compatibility: <code>Axios</code> is designed to work consistently across different browsers, ensuring that our API requests function reliably regardless of the user's browser environment. This eliminates the need for polyfills or workarounds to ensure compatibility.</p> </li> <li> <p>Interceptors and middleware: <code>Axios</code> offers powerful interceptors and middleware functionality, allowing us to intercept and modify requests and responses at various stages of the request lifecycle. This feature is valuable for implementing global error handling, request/response logging, authentication, and other custom logic.</p> </li> <li> <p>Response transformation: With <code>Axios</code>, we can easily transform response data using interceptors or by specifying a response transformer. This makes it convenient to parse and modify the API response before it reaches the rest of our codebase, ensuring consistent data structures across different endpoints.</p> </li> <li> <p>Error handling: <code>Axios</code> provides comprehensive error handling capabilities. It automatically rejects promises on non-2xx HTTP status codes, simplifying error detection and handling. Additionally, we can define custom error handling logic, such as retry mechanisms or handling specific error types.</p> </li> </ol>"},{"location":"api_requests/#front-end-and-back-end-consistency","title":"Front-End and Back-End Consistency","text":"<p>By adopting <code>Axios</code> for API requests in both front-end and back-end development, we achieve a consistent approach across our projects. This consistency simplifies code maintenance, reduces the learning curve for new team members, and enables seamless collaboration between front-end and back-end developers.</p> <p>Whether we are building web applications using frameworks like React or Vue.js on the front end, or developing server-side applications with Node.js on the back end, we can leverage the same <code>Axios</code> API to make HTTP requests.</p>"},{"location":"api_requests/#conclusion","title":"Conclusion","text":"<p>Using <code>Axios</code> for API requests provides us with a robust and consistent solution for handling HTTP communication in our projects. Its advantages over native browser fetch, such as enhanced syntax, cross-browser compatibility, interceptors, and error handling, make it the preferred choice for our team.</p>"},{"location":"api_requests/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"chatgpt-functions/","title":"Wakeflow ChatGPT","text":"<p>You can develop functions for ChatGPT and install them on Wakeflow. You will be paid $0.01 for every time your function is called.</p> <p>A function is essentially a piece of functionality that can be made available to ChatGPT. ChatGPT itself decides when to make use of the function. For example, if you ask ChatGPT \"Show me a Pulp Fiction meme\" and it has a function available that is called \"getMeme\" and has a description like \"returns the url of a meme of the theme the user asked for\", then it will likely call that function to get the url of a meme and reply with that url. </p>"},{"location":"chatgpt-functions/#instructions","title":"Instructions","text":"<p>Below we outline how you can develop a function that can be made available to ChatGPT. We use the example of getting a meme, but other usecases include: - sending emails - looking up a name in an address book - writing invoices - and anything else you can come up with...</p> <p>Here is a schematic of the overall flow required to publish a function on Wakeflow. We describe each step in more detail below.</p> <p></p> <p>To develop a function you need to  1. Host an application that makes the function and its docs available 2. Register your function with Wakeflow 3. \"Install\" the function on your WhatsApp number</p>"},{"location":"chatgpt-functions/#1-host-an-application-that-makes-the-function-and-its-docs-available","title":"1. Host an application that makes the function and its docs available","text":"<pre><code> - /docs\n - /function\n</code></pre> <p>The docs function tells Wakeflow how to use your function. It is an OpenAPI specification for your /function endpoint. Let's say you're developing a function that returns a meme. Your /docs endpoint might return a json payload like so:</p> <pre><code> \"name\": \"getMeme\",\n  \"description\": \"returns the url of a meme of the theme the user asked for\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": { \"theme\": { \"type\": \"string\" } },\n    \"required\": [\"theme\"],\n  },\n</code></pre> <p>The functions endpoint needs to allow invoking the function. For example, Wakeflow would need to be able to call the function like so:</p> <pre><code>POST https://your.service.com/function\n{\n  \"theme\":\"Pulp Fiction\"\n}\n</code></pre> <p>and get a response payload like so:</p> <pre><code>{ \"meme\": \"https://i.kym-cdn.com/photos/images/original/002/092/391/2b5\" }\n</code></pre>"},{"location":"chatgpt-functions/#2-register-your-function-with-wakeflow","title":"2. Register your function with Wakeflow:","text":"<p>Once your service is deployed, up and running, you can register it with Wakeflow. To do so:</p> <ol> <li> <p>Get yourself a token from https://tokens.wakeflow.io</p> </li> <li> <p>Make a POST request to the Wakeflow API, like so:</p> </li> </ol> <pre><code>POST https://api.wakeflow.io/functions\nHeaders: \n  Authorization: Bearer [token]\nBody: \n  {\n    \"docsUrl\":\"https://your.service.com/getMeme/docs\",\n    \"functionUrl\":\"https://your.service.com/getMeme/function\" \n  }\n</code></pre> <p>This will return a payload containing the functionId like so:</p> <pre><code>  { \"functionId\": \"abc123\" }\n</code></pre>"},{"location":"chatgpt-functions/#3-install-the-function-on-your-whatsapp-number","title":"3. \"Install\" the function on your WhatsApp number","text":"<p>You can then \"install\" the function for your personal whatsapp number by making a POST request like so:</p> <pre><code>POST https://api.wakeflow.io/functions/abc123/users\nHeaders: \n  Authorization: Bearer [token]\nBody: \n  { \"phone\": \"+44123456789\" }\n</code></pre> <p>You are now able to test your function end-to-end on WhatsApp by WhatsApping the following number: +44 7451 282218</p>"},{"location":"chatgpt-functions/#review","title":"Review","text":"<p>We will then review your function and test it. If your function does not  - throw any errors - provide offensive content - show unexpected results for the users</p> <p>we'll make it universally available for anyone to install in our App Store.</p>"},{"location":"chatgpt-functions/#help-and-support","title":"Help and Support","text":"<p>If you get stuck or need any help. Please don't hesitate to contact us by whatsapping: +447500172268. Any feedback is always welcome.</p>"},{"location":"chatgpt-functions/#the-result","title":"The result","text":""},{"location":"cicd/","title":"How we CI/CD","text":""},{"location":"cicd/#what-is-ci","title":"What is CI","text":"<p>Continuous Integration is the practice of merging all developers' working copies to a shared <code>master</code> branch multiple times per day.</p>"},{"location":"cicd/#why-ci","title":"Why CI","text":"<p>Hypothetical scenario</p> <ul> <li>Imagine you and Joe (your colleague) are each working on a codebase. You both have your separate feature branches. You each discover a bug. You each fix the bug, but in different ways. You eventually finish your branch and try to merge it into master. If you're the later of the two you to merge, you'll have a merge conflict, because the way you fixed the bug edited the same lines that Joe edited to fix the bug. And that's the best case. If you're unlucky, there is no merge conflict and you both fixed the bug in different ways, but the overall result is now incorrect (e.g. you have a function that should increment by 1, but you both realise it doesn't. You both edit it to add 1, which results in it adding 2) </li> </ul> <p>What sucks about this scenario:</p> <ul> <li>you both spent time identifying a bug and understanding what's wrong</li> <li>you both spent time coming up with a solution</li> <li>you were the unlucky one that had to face the merge-conflict</li> <li>if you're really unlucky, there was no merge-conflict and you're now trying to figure out why the tests won't pass</li> <li>if you're unluckier still, you don't notice, it goes to production and the client is angry</li> </ul> <p>How CI helps:</p> <ul> <li>it minimises the probability that you both encounter the bug, because your separate universes only exist for a few hours, not days/weeks</li> <li>it minimises the probability of merge conflicts in the same way</li> <li>it makes sure valuable contributions are made available to everyone as soon as possible</li> <li>it avoids you having to keep track of all the branches (parallel universes) that exist and what is being worked on/already fixed in which branch (which is mentally very draining)</li> <li>as part of merging your changes into master you run the testing pipeline. This means you get quick feedback before your mind moves on to other tasks, which reduces context-switching</li> </ul>"},{"location":"cicd/#releasability","title":"Releasability","text":"<p>Code should always be ready to release into production. </p> <p>This is important because we should always be ready to make a quick change and release it into production. If code is not currently releasable, we start building up a backlog of changes in different branches, which makes the benefits of CI (see above) unachievable.</p>"},{"location":"cicd/#how-we-cicd_1","title":"How we CI/CD","text":"<p>We continuously integrate and deploy changes to our code bases using Github Actions.</p> <p>In order to add a github action to a repo, one needs to add a <code>cicd.yml</code> file to the <code>.github/workflows</code> folder in the repo.</p>"},{"location":"cicd/#our-template","title":"Our Template","text":"<p>The exact steps executed in the <code>cicd.yml</code> file depend on the requirements of the repo, but a good template can be found here: cicd.yml</p>"},{"location":"cicd/#secrets","title":"Secrets","text":"<p>Often github actions require secrets, like e.g. auth tokens, that give the action permission to carry out the tasks it needs to edit cloud based resources. These can be added by the owner of the github repo. </p>"},{"location":"cicd/#help","title":"Help","text":"<p>If you need help getting a ci/cd workflow set up, reach out to andi@wakeflow.io</p>"},{"location":"client_communication_principles/","title":"Client Communication Principles","text":"<p>Effective communication is key to building strong client relationships and delivering successful projects. Here are our core principles for client communication:</p>"},{"location":"client_communication_principles/#always-responsive","title":"Always Responsive","text":"<p>We ensure clients feel heard and supported by being responsive across all channels:</p> <ul> <li>Emails &amp; Chat Messages<ul> <li>Always acknowledge receipt of every email or message, even if a full response will follow later.</li> <li>Use quick acknowledgements like:<ul> <li>\u201cThanks for the update, we\u2019re on it.\u201d</li> <li>\u201cGot it, will review and get back shortly.\u201d</li> </ul> </li> <li>Aim to provide meaningful responses as soon as possible; this builds trust and reliability.</li> </ul> </li> </ul>"},{"location":"client_communication_principles/#proactive-collaboration","title":"Proactive Collaboration","text":"<p>Our goal is not just to deliver tasks, but to continuously add value:</p> <ul> <li> <p>In Meetings</p> <ul> <li>Actively participate by asking questions, clarifying needs, and offering ideas.</li> <li>You can only build great software if you fully understand the problem it is trying to solve.</li> </ul> </li> <li> <p>Suggest Improvements</p> <ul> <li>Suggest product improvements or optimisations that can enhance client success.</li> </ul> </li> <li> <p>Beyond the Brief</p> <ul> <li>If we identify potential enhancements, we bring them to the client\u2019s attention before being asked.</li> </ul> </li> <li> <p>Don\u2019t Let Great Work Go Unnoticed</p> <ul> <li>Unless you show and explain a new feature to the client, they might never realise it\u2019s there or understand its value.</li> <li>Even if they do notice, a small tweak or insight from their side might make the feature significantly more impactful.</li> <li>Having that conversation gives them the opportunity to shape the feature into something even more useful.</li> </ul> </li> </ul>"},{"location":"client_communication_principles/#build-long-term-trust","title":"Build Long-Term Trust","text":"<ul> <li>Consistency in communication and delivery strengthens the client\u2019s confidence in our team.</li> <li>Even a short delay in communication can cause uncertainty.</li> <li>We mitigate this with timely check-ins and updates.</li> </ul>"},{"location":"client_communication_principles/#be-prepared-before-every-meeting","title":"Be Prepared Before Every Meeting","text":"<p>Preparation is key to building confidence and running smooth, productive client meetings. Before every meeting:</p> <ul> <li>Review what you plan to present or discuss \u2013 have a clear goal for the meeting.</li> <li>Anticipate possible questions or blockers \u2013 especially related to timelines, bugs, or scope.</li> <li>Have mitigation strategies ready \u2013 know how you\u2019ll respond if something is delayed or not working as expected.</li> <li>Test demos beforehand if you\u2019re planning to show a feature or screen.</li> </ul>"},{"location":"client_communication_principles/#be-professional-during-meetings","title":"Be Professional During Meetings","text":"<p>Meetings are key moments to build trust, show value, and strengthen the client relationship. During every meeting:</p> <ul> <li>Listen actively to what the client is saying \u2014 not just the words, but the problem behind the request.</li> <li>Acknowledge their challenges or concerns without being defensive.</li> <li>Stay solution-focused \u2013 even when issues arise, present a clear path forward.</li> <li>Share ideas or improvements where relevant \u2013 even small suggestions can show that we care.</li> <li>Avoid internal distractions \u2013 treat client time with the same respect you\u2019d expect.</li> </ul>"},{"location":"client_communication_principles/#our-mindset","title":"Our Mindset","text":"<p>\u201cWe don\u2019t just build products for our clients, we partner with them to drive growth.\u201d</p> <p>We maintain a mindset of ownership and initiative. Whether it\u2019s fixing a bug, suggesting a UI improvement, or just responding on time, every small act builds a better client experience.</p>"},{"location":"contributer_leaderboard/","title":"Contributor Leaderboard","text":"<p>Our how-we-do repo is only as good as the contributions our team make to it. Because Gamification works, we honour the biggest contributors on this board:</p> <ol> <li>Aravind &amp; Zaid (both 300 points)</li> <li>Jamie (20 points)</li> <li>Merve &amp; Husam (0 points)</li> </ol>"},{"location":"contributer_leaderboard/#points-per-contribution","title":"Points per contribution","text":"<ul> <li>10 per idea contributed</li> <li>20 per inconsistency spotted</li> <li>100 for PR</li> </ul>"},{"location":"contributing/","title":"How we contribute","text":"<p>Any member of the team is encouraged to contribute to any and all of our code bases, including this how-we-do repo to make sure our documentation is always up to date.</p> <p>To make a contribution, make sure to follow the deploying instructions</p>"},{"location":"contributing/#contributor-leaderboard","title":"Contributor Leaderboard","text":"<p>You can see the contributor leaderboard here.</p>"},{"location":"css/","title":"Styling Components with <code>styled-components</code>","text":"<p>At wakeflow, we follow a consistent approach to styling components in our front-end development. For our styling needs, we rely on the <code>styled-components</code> library, which offers a powerful and intuitive solution. In this guide, we'll explore how <code>styled-components</code> allows us to create styled components with ease and maintain consistency across our projects.</p>"},{"location":"css/#install","title":"Install","text":"<p>To get started with <code>styled-components</code>, you can install it using npm or yarn:</p> <pre><code>npm i styled-components\n</code></pre> <p>or</p> <pre><code>yarn add styled-components\n</code></pre>"},{"location":"css/#example-usage-of-styled-components","title":"Example Usage of <code>styled-components</code>","text":"<p>The following code snippet demonstrates an example of sorting an array using the <code>styled-components</code> package:</p> <pre><code>import styled from 'styled-components';\n\n\nconst App = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;Button&gt;Click Me&lt;/Button&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst Button = styled.button`\n  background-color: #3498db;\n  color: white;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &amp;:hover {\n    background-color: #2980b9;\n  }\n`;\n\n</code></pre>"},{"location":"css/#why-styled-components","title":"Why styled-components?","text":"<p>When it comes to styling components, <code>styled-components</code> offers numerous advantages that make it a valuable choice for our projects. Here are some reasons why we prefer <code>styled-components</code>:</p> <ol> <li> <p>Component-Based Styling: <code>styled-components</code> allows us to define styles directly within our component files, making it a truly component-based approach to styling. This promotes modularity and encapsulation, as each component carries its own styles, eliminating style conflicts and making our codebase more maintainable.</p> </li> <li> <p>CSS-in-JS: With <code>styled-components</code>, we can write CSS styles using JavaScript. This eliminates the need for separate CSS files and provides us with the full power of JavaScript to dynamically generate styles based on props or other variables. It also enables us to create reusable style components and effectively manage CSS dependencies.</p> </li> <li> <p>Automatic Vendor Prefixing: <code>styled-components</code> automatically handles vendor prefixing for us, ensuring cross-browser compatibility without the need for manual prefixing. This saves us time and effort, as we don't have to worry about writing vendor-specific CSS rules.</p> </li> <li> <p>Styled Theming: <code>styled-components</code> comes with built-in support for theming, allowing us to easily define and switch between different themes in our applications. This feature is beneficial when creating applications with multiple themes or supporting dark mode, as it provides a convenient way to manage and apply theme-specific styles.</p> </li> <li> <p>Styled API: The <code>styled-components</code> API is intuitive and easy to use. It allows us to create styled components by defining CSS styles using template literals, making it simple to structure and compose styles for our components.</p> </li> </ol> <p>By leveraging the capabilities of <code>styled-components</code>, we can create beautiful, maintainable, and themeable components while enjoying the benefits of a component-based and CSS-in-JS approach.</p>"},{"location":"css/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"dates/","title":"Using <code>Day.js</code> for Date Manipulation","text":"<p>At wakeflow, we adhere to a consistent approach when it comes to date manipulation in our front-end and back-end development. We utilize the <code>Day.js</code> library as our preferred choice for handling date and time operations. In this guide, we'll explore the benefits of <code>Day.js</code> and how it ensures consistency across our projects.</p>"},{"location":"dates/#install","title":"Install","text":"<p>To get started with <code>day.js</code>, you can install it using npm or yarn:</p> <pre><code>npm i dayjs\n</code></pre> <p>or</p> <pre><code>yarn add dayjs\n</code></pre>"},{"location":"dates/#example-dayjs-function","title":"Example <code>Day.js</code> Function","text":"<p>The following code snippet demonstrates an example of a <code>Day.js</code> function that showcases how we can leverage <code>Day.js</code> for date manipulation.</p> <pre><code>import dayjs from 'dayjs';\n\nexport const formatDate = (date, format = 'YYYY-MM-DD') =&gt; {\n  return dayjs(date).format(format);\n};\n</code></pre>"},{"location":"dates/#why-dayjs","title":"Why <code>Day.js</code>?","text":"<p><code>Day.js</code> offers several advantages for date manipulation, making it an excellent choice for our projects:</p> <ol> <li> <p>Lightweight: <code>Day.js</code> is a lightweight library that provides a minimalistic and fast alternative to larger date manipulation libraries like Moment.js. It has a small footprint, which improves the performance and load time of our applications.</p> </li> <li> <p>Simple and Intuitive API: <code>Day.js</code> has a simple and intuitive API, making it easy to work with and understand. Its API is similar to Moment.js, which allows developers familiar with Moment.js to transition seamlessly.</p> </li> <li> <p>Modularity: <code>Day.js</code> follows a modular architecture, allowing us to import only the specific features we need. This reduces the overall bundle size of our applications, optimizing performance and improving efficiency.</p> </li> <li> <p>Immutable and Chainable: <code>Day.js</code> uses immutable operations, ensuring that the original date object remains unchanged during manipulation. Additionally, <code>Day.js</code> supports method chaining, allowing for concise and readable code.</p> </li> </ol> <p>By adopting <code>Day.js</code> for date manipulation, we ensure consistency and efficiency across our projects, enabling smoother collaboration and easier maintenance.</p>"},{"location":"dates/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"deploying/","title":"How we deploy","text":"<p>When deploying a change to one of our repo's master branch we follow the following steps:</p>"},{"location":"deploying/#1-branch-out","title":"1. Branch out","text":"<p>When making a change to any codebase on wakeflow's repos, the first step is to create a branch that will contain the change.</p> <p>Branch naming: The branch name should start with your initials, so that anyone can tell who created the branch. If I (Andreas Kater) wanted to update the CSS styling on our website, I'd create a branch called ak/css-updates with the command <code>gbo ak/css-updates</code> (install our dotfiles to get access to shortcuts like <code>gbo</code> here).</p> <p>I would then commit my changes to this branch.</p>"},{"location":"deploying/#2-pull-request","title":"2. Pull Request","text":"<p>When the change is complete, we submit a pull request. The easiest way to do that is to checkout the branch with <code>gc ak/css-updates</code> and then create the PR with <code>gpr</code>.</p>"},{"location":"deploying/#3-code-owner-review","title":"3. Code Owner Review","text":"<p>Every PR needs to be reviewed by a code owner of the repo. Github is configured in such a way that merging is not possible until this has taken place.</p>"},{"location":"deploying/#4-rebase","title":"4. Rebase","text":"<p>Once you have approval from at least one other team member, you rebase your changes.</p> <p>This basically squashes all commits you have on your branch into a single one, so that the master branch only has one commit for all the changes you made on your branch. This keeps the git history of our master branch clean and easy to understand.</p> <p>For example, in updating the CSS on our website, I might have made the following 3 commits:</p> <p></p> <p>Those commits are useful while I'm working on the branch, but in our master branch's git history we don't need that level of detail. We want a single message there, that tells us what happened at a higher level: <code>ak/css-updates</code>. This message is usually the branch name.</p> <p>To rebase: 1. <code>grbi origin/master</code> and then follow the instructions. 2. You should see someting like:</p> <pre><code>`pick 52a18f6 updated deploying.md`\n\n`pick 35a32e9 updated images`\n\n`pick b003d67 updates merge instructions`\n</code></pre> <ol> <li> <p>Typically you'll want to edit this file like so:</p> <p><code>r 52a18f6 updated deploying.md</code> &lt;- the <code>r</code> stands for reword and lets you rename your commit message</p> <p><code>f 35a32e9 updated images</code> &lt;- the <code>f</code> stands for fixup and lets you incorporate these changes into the commit above, so that there is only one commit message</p> <p><code>f b003d67 updates merge instructions</code></p> </li> </ol>"},{"location":"deploying/#5-notify-on-slack","title":"5. Notify on Slack","text":"<p>Once we have got approval from a code owner to merge, we notify the rest of the team on Slack.</p> <p>To do this, we send a message to the <code>#deploy</code> channel with the url of the PR we are about to merge, like so:</p> <p></p> <p>When we merge in our changes on Github, Github Actions make sure that our code is deployed automatically.</p> <p>Therefore before merging, we want to make sure the team is alerted to the fact that a deploy is about to take place in case anything goes wrong and the rest of the team needs to step in to help.</p>"},{"location":"deploying/#6-merge","title":"6. Merge","text":"<p>Once you have notified the team you can merge the PR.</p> <ol> <li>Check the git history is linear, by running <code>gl</code>. You should see someting like this:</li> </ol> <p></p> <ol> <li>Check your branch is exactly one commit ahead of <code>master</code>. If not, rebase as explained above.</li> <li>Check out the master branch with <code>gc master</code></li> <li>Run <code>git merge ak/css-updates</code></li> </ol>"},{"location":"deploying/#7-smoke-test","title":"7. Smoke test","text":"<p>After rebasing and merging, we make sure that the deploy completes successfully, by watching the github actions complete.</p> <p>Once the Github Actions have successfully completed, we do a smoke test of the application, to: 1. make sure everything works as expected 2. make sure your changes are now live</p>"},{"location":"deploying/#8-clean-up-branches","title":"8. Clean up branches","text":"<p>Now that the change has been successfully deployed, we no longer need the feature branch. Therefore we delete it, both locally and remotely, using the command <code>gdbb ak/css-updates</code> (gdbb stands for git delete both branches).</p> <p>Run <code>gl</code> to check your feature branch is no longer there.</p> <p>Success! You're done.</p>"},{"location":"deploying/#questions","title":"Questions","text":"<p>If you have any questions about this process, just slack Andi.</p>"},{"location":"developer_bands/","title":"Developer bands","text":"<p>The following bands are designed to provide a structure to help better understand current competencies and act as a starting point for individualised discussions around progress.</p> <p>The criteria set out in each band is by no means exhaustive, but aims to provide a solid point of reference.</p>"},{"location":"developer_bands/#1-associate-developer","title":"1. Associate Developer","text":"<ul> <li>Pull Requests require multiple rounds of feedback to reach a mergeable state</li> <li>The basics of a language or framework are mastered, but more advanced concepts   are unfamiliar</li> <li>Occasional issues following patterns and approaches within existing code bases</li> <li>Most comfortable working on tightly scoped features or routine problems</li> <li>Typically less than 2 years focused on a specific domain in a   professional environment</li> </ul>"},{"location":"developer_bands/#2-developer","title":"2. Developer","text":"<ul> <li>Pull Requests require occasional discussion around approach or implementation</li> <li>Clearly able to identify and follow predefined patterns or approaches in an   existing code base</li> <li>Most comfortable working on clearly defined, well scoped features or   problems</li> <li>Typically 2-5 years focused on a specific domain in a professional   environment</li> <li>Being able to decide the priority level of a bug and set of the appropriate course of action</li> <li>Being able to understand user stories and translate them into technical requirements </li> <li>Being able to keep the client up to date on the day to day progress of a project </li> </ul>"},{"location":"developer_bands/#3-senior-developer","title":"3. Senior Developer","text":"<ul> <li>Pull Requests are a tool for communication of new features and a   spring-board for higher-level discussions around approach</li> <li>Experienced and comfortable through the entire lifecycle of a feature, from   ideation to delivery</li> <li>Can understand business drivers and make solid proposals to the relevant   stakeholders for building new features or refining existing ones</li> <li>A subject matter expert in at least one programming environment</li> <li>Typically 5-8 years focused on a specific domain in a professional   environment</li> <li>Line managing other team members</li> <li>Managing all client communication on a project</li> <li>Being able to attend sales meetings and bring your technical expertise to the conversation</li> <li>Using your technical knowledge to put together a plan based on client requirements (Solutions Engineering)</li> </ul>"},{"location":"developer_bands/#4-tech-lead","title":"4. Tech Lead","text":"<ul> <li>Pull Requests are a mentoring tool to engage less experienced teammates and   showcase best practices</li> <li>Highly adept at running and executing on multiple projects across multiple   domains</li> <li>Heavily involved in setting and maintaining professional standards for the   organisation as a whole</li> <li>A subject matter expert in a number of programming environments</li> <li>Training other developers on both technical and non technical skills </li> <li>Confident building and running small teams through substantial projects</li> <li>Typically 8-12 years focused on a specific domain in a professional   environment</li> </ul>"},{"location":"developer_bands/#5-vp-of-engineering","title":"5. VP of Engineering","text":"<ul> <li>Focus on defining and progressing processes and innovation at a company-wide   level</li> <li>Fully capable of designing, owning and running entirely new, non-trivial   systems</li> <li>Confident building and running larger teams through long-running, complex   projects with multiple-stakeholders</li> <li>Recognised widely in the industry as having made substantial material   contributions and considered a subject matter expert by peers</li> <li>Typically 12-15+ years focused on a specific domain in a professional   environment</li> </ul> <p>The bands are based on those set out by the team at Basecamp</p>"},{"location":"developer_bands/#questions","title":"Questions","text":"<p>If you have any questions about this process, please reach out to Andi.</p>"},{"location":"dotfiles/","title":"Dotfiles","text":"<p>Dotfiles are configuration files that are usually hidden with a filename like <code>.filename</code> - hence the name <code>dot</code> files.</p> <p>At Wakeflow, we publish our dotfiles in the following repo: https://github.com/wakeflow/dotfiles</p> <p>The dotfiles contain our best practices and tools to accelerate our workflows.</p>"},{"location":"dotfiles/#questions","title":"Questions","text":"<p>If you need any help with installing these, reach out to Andi.</p>"},{"location":"event_tracking/","title":"How we track events","text":"<p>We track user events that help us understand our users' behaviour. Each event is associated with the email address of a user. Therefore in order to track an event, it needs to be linked to an individual email address.</p>"},{"location":"event_tracking/#contacts-and-traits-events-and-properties","title":"Contacts and traits, Events and properties","text":"<p>The details we associate with users are called traits while the details we associate with events are called properties.</p> <p>For example, a person could have the following traits:</p> <pre><code>{\n  name: \"Joe Bloggs\",\n  email: \"joe@wakeflow.io\",\n  accountType: \"premium\"\n}\n</code></pre> <p>While an event (say, a \"Form Submitted\" event) could have the following properties:</p> <pre><code>{\n  formId: 1423,\n  title: \"Get in touch\",\n  source: \"ad_campaign_412\"\n}\n</code></pre> <p>Traits and properties are always defined in camelCase e.g. <code>accountType</code> rather than snake_cse or any other case.</p>"},{"location":"event_tracking/#event-naming-convention","title":"Event naming convention","text":"<p>We follow the <code>Object Action</code> naming convention. This means that all event names start in the affected Object and then describe the action that has affected this Object. For example:</p> <ul> <li>Product Viewed</li> <li>Application Submitted</li> <li>Account Created</li> </ul> <p>The names of events are always given in Title Case, e.g. <code>User Signed Up</code>, rather than snake_case or any other case.</p>"},{"location":"event_tracking/#how-to-log-events","title":"How to log Events","text":"<p>We use our in-house <code>wakeflow-events</code> package to track events. See instructions for how to use it here.</p>"},{"location":"event_tracking/#list-of-identify-calls-and-their-properties","title":"List of identify calls and their properties","text":"<pre><code>wakeflowEvents.identify('joe@wakeflow.io',{\n  name:'Joe Bloggs',\n  address:{\n    street: '10 Somewhere Road',\n    city: 'London',\n    postcode: 'W2 6BC'\n    country: 'UK'\n  }\n})\n</code></pre>"},{"location":"event_tracking/#list-of-track-calls-and-their-properties","title":"List of track calls and their properties","text":"<pre><code>wakeflowEvents.track('joe@wakeflow.io','User Logged In',{\n  method:'EmailAndPassword'\n})\n\nwakeflowEvents.track('joe@wakeflow.io','User Logged Out')\n</code></pre>"},{"location":"event_tracking/#questions","title":"Questions","text":"<p>If you have any questions about event tracking, reach out to andi@wakeflow.io</p>"},{"location":"firestore_backups/","title":"Firestore backups","text":"<p>We use a github action to regularly take backups of Firestore on the projects that make use of this database.</p>"},{"location":"firestore_backups/#setup","title":"Setup","text":"<ol> <li>Create a Google Storage Bucket, say with name: <code>gs://firestore-backups</code></li> <li>Create a service account that has the following roles:</li> </ol> <pre><code>[1] Cloud Datastore Import Export Admin\n[2] Storage Admin\n</code></pre> <ol> <li>Create a JSON key file for the service account</li> <li>Use the command given below (replacing the path with the path to your downloaded keyfile) to base64 encode the keyfile</li> </ol> <pre><code>base64 path/to/your/downloaded/keyfile.json\n</code></pre> <ol> <li>Add the base64 encoded keyfile as a secret to the github repo. Call the secret <code>FIREBASE_BACKUP_GCLOUD_AUTH</code></li> <li>create the file <code>.github/workflows/firestore_backup.yml</code> in your repo</li> <li>Copy the below contents into that file</li> <li>Create a Pull Request</li> <li>Once the PR is approved, a Firestore backup will be taken every night at 3am.</li> </ol> <pre><code>name: Firestore backup\n\non:\n  schedule:\n    - cron: \"0 3 * * *\"\n\njobs:\n  backup:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lfdm/firestore-backup-gh-action@1.0.0\n        with:\n          gcloudAuth: ${{ secrets.FIREBASE_BACKUP_GCLOUD_AUTH }}\n          projectId: swallow-quotes\n          storageBucket: gs://firestore-backups\n\n\n</code></pre>"},{"location":"firestore_backups/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"good_software/","title":"How we define Good Software","text":"<p>Writing good software is hard and defining how to write it is even harder. Nonetheless, there are certain characteristics that most good software can be described by.</p>"},{"location":"good_software/#good-software","title":"Good Software:","text":"<ul> <li><code>is modular</code><ul> <li>e.g. If you need to write a function that divides a number by five and then squares it, you write two functions: one that divides by 5 and one that squares the input.</li> </ul> </li> <li><code>separates concerns</code><ul> <li>e.g. If you have an API, you write one function that determines the payload and another function that handles the request and returns the response. That way you can test the payload function individually. That way you're not mixing the concerns of </li> <li>the API functionality (which should be handled by express)</li> <li>the business logic (which should be handled by your custom code)</li> </ul> </li> <li><code>is concise</code><ul> <li>Less code is better code, because<ul> <li>It\u2019s easier to read and understand</li> <li>It avoids unnecessary complexity</li> </ul> </li> <li>This also holds for files<ul> <li>if a file contains one variable/function that is used in just one place, it shouldn't be it's own file</li> </ul> </li> </ul> </li> <li><code>is consistent</code><ul> <li>same things should be called the same<ul> <li>We don\u2019t create two variables that have the same value<ul> <li>e.g. we don\u2019t do something like this <code>js const {firstname, lastname} = person const individual = {firstname, lastname}</code> instead, we use <code>person</code> everywhere</li> </ul> </li> </ul> </li> <li>We avoid having a different name for the same variable in different scopes<ul> <li>e.g. we don\u2019t call something <code>router</code> in a module and then export it as <code>userRouter</code>. We call it <code>userRouter</code> everywhere.</li> </ul> </li> <li>We avoid giving objects different structures in different places<ul> <li>e.g. if we have an object that has tags <code>const obj = {tags:['new','cool']}</code>, we don't store the tags in the database as a concatenated string <code>'new;cool'</code>. That's confusing! Instead we store the tags as an array.</li> </ul> </li> </ul> </li> <li><code>simple</code><ul> <li>We don\u2019t deeply nest objects unless absolutely necessary<ul> <li>e.g. we prefer  <code>js const person = {   firstname:\"Joe\",   lastname:\"Bloggs\" }</code> over ```js const person = {   name:{     first:\"Joe\",     last:\"Bloggs\"   } }</li> </ul> </li> </ul> </li> <li><code>has high cohesion</code><ul> <li>your modules should group things that have a lot in common<ul> <li>e.g. low cohesion looks like this: <code>js const helpers = {   sendEmail:\"...\",   validateSchema:\"...\",   fetchEmail:\"...\",   checkForCompleteness:\"...\" } const validateInput = \"...\"</code> high cohesion looks like this: <code>js const emailService = {   sendEmail:\"...\",   fetchEmail:\"...\", } const validator = {   validateSchema:\"...\",   validateInput:\"...\",   checkForCompleteness:\"...\" }</code></li> </ul> </li> <li>we compartmentalise related code in the same place, so that it's easy to find </li> </ul> </li> <li><code>abstracts away complex concepts</code><ul> <li>e.g. imagine you're creating an email service. Lots of things have to happen for you to send that email. You need to have someting like sendgrid, you need to authenticate with that service, you need to format the email right, you need to log errors etc, but all of this should be abstracted away for a user of your email service. That user should simply be able to type  <code>js emailer.email({   to:'someone@wakeflow.io',   subject:'something clever',   body:'this will blow you away' })</code> and not worry about the rest.</li> </ul> </li> <li><code>is loosly coupled</code><ul> <li>e.g. imagine you have a webapp that needs to speak to your database. You could just write an API that allows your webapp to get the data for each view from the db. However, tomorrow you might need to build a mobile app that also needs to fetch data. Your webapp API doesn't give you the right mix of data, so you write a mobile app API that gets it for you. Next you need analytics data from your API and you build a third API. Each API is tightly coupled to it's purpose. Imagine you had instead written a generic API that has a clear interface that allows any service to get any data from the db. This generic API would allow all your service to get their required data. This would be a loosely coupled system, because the generic API doesn't need to know anything about the business logic of any of the purposes it fulfills and it would still work.</li> </ul> </li> <li><code>can repeat itself</code><ul> <li>Although DRY (Don't repeat yourself) is a common developer motto, it shouldn't be practiced at all cost</li> <li>e.g. if you need a placeholder like <code>Joe Bloggs</code> in two places, it's better to just type it out in two places, rather than to create a variable and import it in both places. This is much easier to read and maintain and the business risk of having one placeholder say <code>Joe Bloggs</code> and one say <code>Joe Smith</code> is low.</li> </ul> </li> <li><code>is written in small commits</code><ul> <li>small, incremental changes are easier to reason about and test</li> <li>if you make 10 changes at a time and THEN run your test suite, you don't know which one caused trouble</li> <li>if you make a change and then realise it wasn't a good change, it's easier to revert it when there's just one (or at least a single commit associated with it)</li> </ul> </li> <li><code>requires fast feedback</code><ul> <li>Fast feedback is essential in a discipline that in many ways is high-frequency trial and error</li> <li>There are many levels of feedback in programming and each adds value:<ul> <li>syntax highlighting in IDE that shows us syntax errors as we type</li> <li>Typescript feedback that shows us type errors before run-time</li> <li>Test suites that show us if our code behaves as desired. These should be run with every commit</li> <li>Deployment tests that show us if our code can be deployed to the production environment</li> <li>Logs that are generated while our code is in production. These alert us if there are any errors</li> </ul> </li> <li>Having feedback sooner is generally better. We try to \"Fail Fast\".</li> <li>We try to get feeback sooner in the development cycle and we try to reduce the amount of time it takes to generate the feedback wherever possible. </li> </ul> </li> </ul>"},{"location":"good_software/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"holidays/","title":"How we holiday","text":""},{"location":"holidays/#annual-leave","title":"Annual Leave","text":"<p>Everybody has annual leave of 25 days per year.</p>"},{"location":"holidays/#public-holidays","title":"Public Holidays","text":"<p>There are 8 public holidays per year in England and Wales. You can take these days off on the date of the actual public holiday or at any other point in the year. This gives you a total holiday allowance of 33 days per year. </p>"},{"location":"holidays/#taking-a-holiday","title":"Taking a holiday","text":"<p>To take a holiday you need to submit a request at least two weeks before your first day off to andi@wakeflow.io. </p> <p>If you want to take public holiday on the date of the public holiday, you do not need to submit a request in advance, but please let the team know nonetheless.</p> <p>After the holiday request has been accepted the dates should be visible on the wakeflow holidays calender. The holiday calendar should have been shared with you and should be visible at https://calendar.google.com If it is not please contact contact@wakeflow.io to have it added.</p>"},{"location":"holidays/#logging-8h-to-the-project-holiday","title":"Logging 8h to the project \"Holiday\"","text":"<p>Each day that you take holiday you must book 8h to the projet \"Holiday\" on https://team.wakeflow.io/this-month</p>"},{"location":"holidays/#carrying-over-holiday-days-to-the-next-year","title":"Carrying over holiday days to the next year","text":"<p>The holiday year runs between 1 January and 31 December. If at the of the year you have days left over, you can take up to 5 of them over into the next year. If you have more than 5 days of holiday left untaken, they will be lost. </p>"},{"location":"holidays/#questions","title":"Questions","text":"<p>If you have any questions around taking holidays, please email contact@wakeflow.io</p>"},{"location":"interview/","title":"How we interview candidates","text":"<p>If you're interested in getting a job at Wakeflow there a number of steps in the interview process that you need to complete successfully. These are listed out below.</p>"},{"location":"interview/#1-our-quiz","title":"1. Our Quiz","text":"<ul> <li>If you're interested in working for Wakeflow, the first step is to take our quiz. You have 5 minutes to complete it and it is available here. If you score well enough on the quiz you're invited to the next stage:</li> </ul>"},{"location":"interview/#2-quick-coding-challenge","title":"2. Quick Coding Challenge","text":"<ul> <li> <p>func.live is one of our side projects. It is a collection of cloud functions that you can use anywhere (via API, as a Javascript package, as a Python Package, in Google Sheets, from our CLI, etc.)</p> </li> <li> <p>This task requires you to build a new function that is not already on func.live and to submit it to the platform. Details can be found on the contributing page.</p> </li> </ul>"},{"location":"interview/#3-15min-interview","title":"3. 15min Interview","text":"<ul> <li>This is a quick informal chat to see whether what you're looking for and what we're looking for is a good match. We'll have some questions for you and give you a chance to ask us some questions as well.</li> </ul>"},{"location":"interview/#4-pair-programming-session","title":"4. Pair Programming Session","text":"<ul> <li> <p>In the Pair Programming Session I'll tell you about a real work problem that we have to solve and ask you to share your screen with me, so that I can see how you go about it. The idea is to see how you write code, but also (and more importantly) how you solve problems. Given we don't know the answer ourselves, it's a good exercise to see whether and how you try to get to a solution.</p> </li> <li> <p>The duration of the Pair Programming Session is 3 hours, so that we have a good amount of time to get to a solution.</p> </li> </ul>"},{"location":"interview/#5-job-offer","title":"5. Job Offer","text":"<ul> <li>If you do well on the Pair Programming Session we are sure you'll be a valuable member of the team and we will make you a job offer. Typically we'd want you to start as soon as possible!</li> </ul>"},{"location":"interview/#6-probation-period","title":"6. Probation Period","text":"<ul> <li>To make 100% sure it's a good fit, we have a 3 months probation period during which either side can decide it isnt working out and break up the relationship without notice. After that we commit to each other with a 3 month notice period. </li> </ul>"},{"location":"interview/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"javascript/","title":"How we javascript","text":"<p>Javascript has been around since the beginning of the internet and has evolved massively as a language. There are therefore many flavours of javascript one could write. Here are some of the approaches we take to make working with shared code bases easier.</p>"},{"location":"javascript/#1-modules-rather-than-commonjs","title":"1. Modules rather than CommonJS","text":"<p>There are two ways you can use code from other files in Node. The traditional way is called CommonJS. It is being replaced by the more modern Module syntax.</p>"},{"location":"javascript/#example-commonjs-syntax","title":"Example CommonJS syntax","text":"<pre><code>const moment = require('moment')\n\nexports.CONSTANT = 'I am a constant'\nexports.func = () =&gt; {}\n</code></pre>"},{"location":"javascript/#example-module","title":"Example Module","text":"<pre><code>import moment from 'moment'\nimport { namedImport } from 'somewhere'\n\nexport const CONSTANT = 'I am a constant'\nconst func = () =&gt; {}\nexport default func\n</code></pre> <p>Wherever possible we use the Module syntax.</p>"},{"location":"javascript/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"linting/","title":"ESLint","text":"<p>When working as a team, using a linter ensures a shared style of coding. This helps everyone immediately get their bearings when looking at a colleague's latest work.  We use eslint as our linter. </p> <p>Every codebase has a .eslintrc file that shares</p> <p>You can find our default .eslintrc file on our dofiles repo.</p>"},{"location":"linting/#installation","title":"Installation","text":"<p>To get started with ESLint, you can install it using npm or yarn:</p> <pre><code>npm install eslint --save-dev\n</code></pre> <p>or</p> <pre><code>yarn add eslint --dev\n</code></pre>"},{"location":"linting/#add-our-eslintjson-file-to-the-root-dir-and-run-this-command","title":"add our <code>.eslint.json</code> file to the root  dir and run this command","text":"<pre><code>eslint . --fix\n</code></pre>"},{"location":"linting/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"onboard/","title":"How we onboard","text":"<p>When a new member joins the team, there is a bunch of admin that needs to happen. Here is a checklist that we use to make sure we didn't miss anything.</p>"},{"location":"onboard/#onboarding-checklist","title":"Onboarding checklist","text":"<ul> <li>@wakeflow.io email address created</li> <li>linkedin profile updated</li> <li>team.wakeflow.io profile filled in</li> <li>team.wakeflow.io time tracking explained</li> <li>introduced to accountants for payroll</li> <li>added to github org</li> <li>@wakeflow.io email added to github profile</li> <li>added to trello</li> <li>profile added to wakeflow.io/team</li> <li>added to daily standup calendar invite</li> <li>added to team@wakeflow.io email group</li> <li>explained holiday calendar, how to book holiday, how to log hours to holiday</li> <li>introduced new joiner to how-we-do</li> <li>explained promotion cycle</li> </ul>"},{"location":"onboard/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"progression/","title":"Career Progression","text":""},{"location":"progression/#timing","title":"Timing","text":"<p>Every year there are two dates where we systematically review the whole team and consider every team member for promotion. These are:</p> <ul> <li>31 March</li> <li>30 September</li> </ul> <p>Leading up to these dates we will collect feedback from clients and team members about your performance and consider whether a promotion has been earned. On these dates any promotions will be communicated. On average, developers should expect to be promoted every 12 to 18 months.</p> <p>You can see the developer bands we have here</p>"},{"location":"progression/#questions","title":"Questions","text":"<p>If you have any questions about this process, please reach out to Andi.</p>"},{"location":"secrets/","title":"How we handle secrets","text":"<p>In programming there are often secrets that need to stay secret. Examples are API keys, GCP credentials, passwords, db config details etc.</p> <p>This is how we handle them:</p>"},{"location":"secrets/#gcp-secret-manager","title":"GCP Secret Manager","text":"<p>Most of our projects are deployed to the Google Cloud Platform. On there every project has its own Secret Manager. You can go see that on https://console.cloud.google.com/security/secret-manager</p> <p>We store our secrets on there.</p> <p>We have an npm package that helps us use it. Please read the REAMDE.md for how to use it here: https://www.npmjs.com/package/@wakeflow/secrets</p>"},{"location":"secrets/#secrets-for-different-environments","title":"Secrets for different environments","text":"<p>If you want to store secrets for different environments you can do so by using a postfix. E.g. for the development environment you might save API_KEY_development in GCP Secret Manager</p> <p>If you then set <code>ENV=development</code> in your local .env file, our @wakeflow/secrets package will know to download <code>API_KEY_development</code> and save it to your .env file as <code>API_KEY</code>.</p> <p>In your production environment you can then set <code>ENV=production</code> and if GCP Secret Manager has <code>API_KEY_production</code> it will download that as <code>API_KEY</code> in the production environment.</p> <p>For more details, please read the README.md at https://www.npmjs.com/package/@wakeflow/secrets </p>"},{"location":"secrets/#secrets-environment-variables","title":"Secrets != Environment variables","text":"<p>Importantly, not everything is a secret. Environment variables are often not.</p> <p>E.g. if you want the app to run on localhost port 3012, then you might set <code>PORT=3012</code> in your .env file. That's a setting for you only. It shouldn't run on port 3012 in prod and not on your colleagues' computers either (because maybe they already run an app on their port 3012)</p> <p>This is a non-secret env var. It should live in your .env file. And that .env file should be .gitignored.</p>"},{"location":"secrets/#secrets-constants","title":"Secrets != Constants","text":"<p>Constants also don't need to be secrets and also don't need to be stored in the Secret Manager. Constants don't change between different environments and are not secret.</p> <p>E.g. imagine your app needs to display a support email address like <code>support@wakeflow.io</code>. It's not secret and it doesn't change between environments. </p> <p>This should just be saved in a <code>config.js</code> file in your codebase. That way it's easy to find and work with. (You can simply go to definition, rather than viewing the value in the GCP Secret Manager UI, which is a hassle)</p>"},{"location":"secrets/#summary","title":"Summary","text":"<ul> <li>Secrets go into secret manager</li> <li>Non-secret env vars go in .env</li> <li>Constants go in config.js</li> </ul>"},{"location":"secrets/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"sorting_arrays/","title":"Sorting Arrays with <code>sort-array</code>","text":"<p>At wakeflow, we follow a consistent approach to sorting arrays in our front-end and back-end development. For array sorting operations, we leverage the <code>sort-array</code> package, which provides a convenient and flexible solution. In this guide, we'll explore how <code>sort-array</code> enables us to efficiently sort arrays and maintain consistency across our projects.</p>"},{"location":"sorting_arrays/#install","title":"Install","text":"<p>To get started with <code>sort-array</code>, you can install it using npm or yarn:</p> <pre><code>npm i sort-array\n</code></pre> <p>or</p> <pre><code>yarn add sort-array\n</code></pre>"},{"location":"sorting_arrays/#example-array-sorting-with-sort-array","title":"Example Array Sorting with <code>sort-array</code>","text":"<p>The following code snippet demonstrates an example of sorting an array using the <code>sort-array</code> package:</p> <pre><code>import sortArray from 'sort-array';\n\nconst arrayToSort = [\n  { name: 'Item A', date: '2023-07-01' },\n  { name: 'Item B', date: '2023-07-03' },\n  { name: 'Item C', date: '2023-07-02' },\n];\n\nconst sortedArray = sortArray(arrayToSort, {\n  by: 'date',\n  order: 'asc',\n});\n\nconsole.log(sortedArray);\n</code></pre>"},{"location":"sorting_arrays/#why-sort-array","title":"Why <code>sort-array</code>?","text":"<p>When it comes to sorting arrays in our projects, we rely on the <code>sort-array</code> package for its numerous advantages. Here are some reasons why <code>sort-array</code> is a valuable choice:</p> <ol> <li> <p>Flexible and Customizable Sorting: <code>sort-array</code> provides a wide range of sorting options and flexibility. We can easily sort arrays based on specific properties, including nested properties or even custom comparison functions. This level of customization allows us to handle complex sorting requirements efficiently.</p> </li> <li> <p>Stable Sorting: The <code>sort-array</code> package ensures stable sorting, which means that elements with equal sort values retain their original order. This is crucial when dealing with arrays containing multiple elements with the same sort value. Maintaining the original order enhances predictability and consistency in our sorting results.</p> </li> <li> <p>Efficient Performance: <code>sort-array</code> utilizes a highly optimized sorting algorithm, resulting in excellent performance, even when sorting large arrays. Its efficient implementation guarantees that our sorting operations execute swiftly, allowing us to process and manipulate data efficiently.</p> </li> <li> <p>Ease of Integration: Integrating <code>sort-array</code> into our projects is straightforward. The package follows a simple and intuitive API, making it easy to incorporate into our existing codebase without significant modifications. It seamlessly integrates with our JavaScript projects, simplifying the sorting process.</p> </li> </ol>"},{"location":"sorting_arrays/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"testing/","title":"How we test","text":"<p>Testing allows us to ensure our code behaves the way it is intented to and, more importantly, that we don't change that desired behaviour when editing existing code bases.</p>"},{"location":"testing/#mocha","title":"Mocha","text":"<p><code>npm i mocha</code></p> <p>Our preferred testing framework is called Mocha. Where possible we use this framework across projects, because it makes it easier for everyone on the team to specialise in the same testing framework.</p>"},{"location":"testing/#example-packagejson-scripts","title":"Example package.json scripts","text":"<pre><code>{\n  scripts:{\n    \"test\": \"mocha --parallel \\\"tests/**/*.test.js\\\" --timeout 15000\",\n    \"watch\": \"mocha --parallel \\\"tests/**/*.test.js\\\" --timeout 5000 --watch\",\n    \"watch-one\": \"mocha --parallel \\\"tests/**/getDeflectionDoc.test.js\\\" --timeout 5000 --watch \"\n  }\n}\n\n</code></pre> <p>The <code>test</code> script should run all of the tests that exist on the project. It is used by our CI/CD workflow to ensure all tests pass before new code is released to production.</p> <p>The <code>watch</code> script reruns all tests continuously everytime to save a file. This is useful for running in development (especially when we are doing test driven development and are editing the codebase to make the tests pass)</p> <p>The <code>watch-one</code> script works like the <code>watch</code> script, except it only runs a single test file. When you have many tests in a project, it can take a long time for all of them to run. Therefore just watching the single one that you're trying to make pass can save time. To change the test that is being watched, edit the regex in the script command in the package.json file.</p>"},{"location":"testing/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"trainingMaterials/","title":"Training Materials","text":"<p>Here are some resources we use to learn our trade and keep up to date.</p>"},{"location":"trainingMaterials/#css","title":"CSS","text":"<ul> <li>CSS Learning Guide</li> <li>Flexbox Learning Game \ud83d\udc38</li> <li>Color fun</li> </ul>"},{"location":"trainingMaterials/#redux","title":"Redux","text":"<ul> <li>Redux Learning Guide</li> </ul>"},{"location":"trainingMaterials/#javascript","title":"Javascript","text":"<ul> <li>Twilio Quest Basic JS \u2694\ufe0f</li> </ul>"},{"location":"trainingMaterials/#looker","title":"Looker","text":"<ul> <li>Tutorial</li> <li>Video Tutorials</li> </ul>"},{"location":"trainingMaterials/#messagebird","title":"MessageBird","text":"<ul> <li>MessageBird Tutorials \ud83d\udc26</li> </ul>"},{"location":"trainingMaterials/#react","title":"React","text":"<ul> <li>Beginners Tutorial</li> </ul>"},{"location":"trainingMaterials/#git","title":"Git","text":"<ul> <li>Twilio Quest Git \ud83d\udd6f\ufe0f</li> </ul>"},{"location":"trainingMaterials/#segment","title":"Segment","text":"<ul> <li>Segment Academy</li> </ul>"},{"location":"validation/","title":"How we validate","text":"<p>In programming you often need to check that a variable has acceptable values.</p> <p>E.g. You want to check that  - a street name is no longer than 25 characters - a phone number has only numbers and the + character - an age is a number between 0 and 100 </p>"},{"location":"validation/#json-schema","title":"JSON-Schema","text":"<p>There are countless libraries out there that allow you to perform these checks. In order to make it easy for all the members of our team to work together, we therefore all use the same approach. This is called JSON-Schema.</p> <p>JSON-Schema is a standard (rather than an individual library) that allows you to define what a variable looks like.</p> <p>The definition of the schema is a JSON-object and can be stored in a .json file in a /schemas folder.</p> <p>To familiarise yourself with the format that a JSON-Schema takes, please have a look at json-schema.org.</p>"},{"location":"validation/#example-json-schema","title":"Example JSON-Schema","text":"<pre><code>const schema = {\n  type: 'object',\n  required: [id,status],\n  properties: {\n    id: {\n      type: 'integer',\n      example: 123,\n      minimum: 0,\n      maximum: 10 ** 20\n    },\n    url: {\n      type: 'string',\n      maxLength: 255,\n      example: 'https://mywebsite.com'\n    },\n    status: {\n      type: 'string',\n      enum: ['active','inactive'],\n      example: 'active',\n      default: 'active'\n    },\n  }\n};\n\n</code></pre>"},{"location":"validation/#example-validation-code","title":"Example Validation Code","text":"<pre><code>const Validator = require('jsonschema').Validator;\nconst validator = new Validator();\n\nconst validateJsonSchema = (data,schema) =&gt; {\n  const result = validator.validate(data,schema,{ nestedErrors: true });\n  result.errors.forEach(error=&gt;{\n    console.log(error)\n  });\n};\n</code></pre>"},{"location":"validation/#questions","title":"Questions","text":"<p>If you have any questions about this process, reach out to andi@wakeflow.io</p>"},{"location":"wakeflow_gpt_docs/","title":"Wakeflow gpt docs","text":""},{"location":"wakeflow_gpt_docs/#wakeflow-gpt-documentation","title":"Wakeflow GPT Documentation","text":""},{"location":"wakeflow_gpt_docs/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Using Wakeflow GPT with the Node-Template</li> <li>Manipulating API Response with Instruction Field</li> </ul>"},{"location":"wakeflow_gpt_docs/#introduction","title":"Introduction","text":"<p>Wakeflow GPT seamlessly integrates with WhatsApp, leveraging the power of GPT to curate a personalized AI assistant tailored for each user. Please follow the instructions in the documentation to get started with Wakeflow GPT.</p>"},{"location":"wakeflow_gpt_docs/#using-wakeflow-gpt-with-the-node-template","title":"Using Wakeflow GPT with the Node-Template","text":"<p>To get started with our Wakeflow GPT functions, we recommend using our <code>node-template</code>. Here's how you can get started:</p> <ol> <li>Clone the Repository    Begin by cloning the <code>node-template</code> repository from GitHub:    <code>bash    git clone https://github.com/wakeflow/node-template.git</code></li> </ol> <p>Refer to the README file to learn how to utilize the template for your custom functions.</p>"},{"location":"wakeflow_gpt_docs/#manipulating-api-response-with-instruction-field","title":"Manipulating API Response with Instruction Field","text":"<p>Wakeflow API responses can be custom-tailored to your needs by providing specific instructions. When calling the API, you can include an <code>instruction</code> field in the response to guide the output's structure and content. This can be extremely useful when you want the result to follow a specific format or style.</p>"},{"location":"wakeflow_gpt_docs/#how-it-works","title":"How it Works","text":"<p>When the API returns a response, it also looks at the <code>instruction</code> field to structure the response as per the guidelines provided. This allows developers to customize the output in a way that best suits their application.</p>"},{"location":"wakeflow_gpt_docs/#example","title":"Example","text":"<p>Consider the <code>whatCanWakeflowDo</code> function:</p> <pre><code>export const whatCanWakeflowDo = errorCatcher(async(req,res) =&gt; {\n  ...\n  res.send({\n    capabilities: randomCapabilities,\n    instruction: `Show the capabilities of Wakeflow in a bullet points and add emojis to make it more fun! Then show an example of how to use one of the capabilities in whatsapp and ask the user if they want to try it out using the exact text shown in the example field in capabilities.`,\n  })\n})\n</code></pre> <p>In the above code:</p> <p>A response is generated that includes the capabilities and instruction fields. The instruction provides guidance on how the capabilities should be displayed to the end-user. In practice, given the instruction, the API might return something like:</p> <p>\ud83d\ude80 Capability 1: Description for Capability 1</p> <p>\ud83c\udf89 Capability 2: Description for Capability 2</p> <p>...</p>"}]}